// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: product.sql

package repository

import (
	"context"

	"github.com/google/uuid"
)

const createProduct = `-- name: CreateProduct :one
INSERT INTO products (
    name,
    image_url,
    admin_id
) VALUES (
    $1, $2, $3
)
RETURNING uuid, name, image_url
`

type CreateProductParams struct {
	Name     string `json:"name"`
	ImageUrl string `json:"image_url"`
	AdminID  int64  `json:"admin_id"`
}

type CreateProductRow struct {
	Uuid     uuid.UUID `json:"uuid"`
	Name     string    `json:"name"`
	ImageUrl string    `json:"image_url"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) (CreateProductRow, error) {
	row := q.db.QueryRow(ctx, createProduct, arg.Name, arg.ImageUrl, arg.AdminID)
	var i CreateProductRow
	err := row.Scan(&i.Uuid, &i.Name, &i.ImageUrl)
	return i, err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE FROM products WHERE uuid = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, argUuid uuid.UUID) error {
	_, err := q.db.Exec(ctx, deleteProduct, argUuid)
	return err
}

const getProduct = `-- name: GetProduct :one
SELECT uuid, name, image_url, variants FROM product__view
WHERE uuid = $1 
LIMIT 1
`

func (q *Queries) GetProduct(ctx context.Context, argUuid uuid.UUID) (ProductView, error) {
	row := q.db.QueryRow(ctx, getProduct, argUuid)
	var i ProductView
	err := row.Scan(
		&i.Uuid,
		&i.Name,
		&i.ImageUrl,
		&i.Variants,
	)
	return i, err
}

const getProductForUpdate = `-- name: GetProductForUpdate :one
SELECT uuid, name, image_url FROM products
WHERE uuid = $1 LIMIT 1
FOR NO KEY UPDATE
`

type GetProductForUpdateRow struct {
	Uuid     uuid.UUID `json:"uuid"`
	Name     string    `json:"name"`
	ImageUrl string    `json:"image_url"`
}

func (q *Queries) GetProductForUpdate(ctx context.Context, argUuid uuid.UUID) (GetProductForUpdateRow, error) {
	row := q.db.QueryRow(ctx, getProductForUpdate, argUuid)
	var i GetProductForUpdateRow
	err := row.Scan(&i.Uuid, &i.Name, &i.ImageUrl)
	return i, err
}

const getProductID = `-- name: GetProductID :one
SELECT id FROM products
WHERE uuid = $1 
LIMIT 1
`

func (q *Queries) GetProductID(ctx context.Context, argUuid uuid.UUID) (int64, error) {
	row := q.db.QueryRow(ctx, getProductID, argUuid)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const listProducts = `-- name: ListProducts :many
SELECT uuid, name, image_url, variants FROM product__view
WHERE (COALESCE($3::text, '') = '' OR name_search @@ to_tsquery($3::text))
LIMIT $1
OFFSET $2
`

type ListProductsParams struct {
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
	Keyword string `json:"keyword"`
}

func (q *Queries) ListProducts(ctx context.Context, arg ListProductsParams) ([]ProductView, error) {
	rows, err := q.db.Query(ctx, listProducts, arg.Limit, arg.Offset, arg.Keyword)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ProductView{}
	for rows.Next() {
		var i ProductView
		if err := rows.Scan(
			&i.Uuid,
			&i.Name,
			&i.ImageUrl,
			&i.Variants,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAProduct = `-- name: UpdateAProduct :one
UPDATE products SET 
    name = CASE WHEN $2::bool
    THEN $3::text
    ELSE name
    END, 
    image_url = CASE WHEN $4::bool
    THEN $5::text
    ELSE image_url
    END
WHERE uuid = $1
RETURNING uuid, name, image_url
`

type UpdateAProductParams struct {
	Uuid        uuid.UUID `json:"uuid"`
	SetName     bool      `json:"set_name"`
	Name        string    `json:"name"`
	SetImageUrl bool      `json:"set_image_url"`
	ImageUrl    string    `json:"image_url"`
}

type UpdateAProductRow struct {
	Uuid     uuid.UUID `json:"uuid"`
	Name     string    `json:"name"`
	ImageUrl string    `json:"image_url"`
}

func (q *Queries) UpdateAProduct(ctx context.Context, arg UpdateAProductParams) (UpdateAProductRow, error) {
	row := q.db.QueryRow(ctx, updateAProduct,
		arg.Uuid,
		arg.SetName,
		arg.Name,
		arg.SetImageUrl,
		arg.ImageUrl,
	)
	var i UpdateAProductRow
	err := row.Scan(&i.Uuid, &i.Name, &i.ImageUrl)
	return i, err
}
