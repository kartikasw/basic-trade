// Code generated by MockGen. DO NOT EDIT.
// Source: basic-trade/internal/repository (interfaces: AdminRepository)

// Package mockRepo is a generated GoMock package.
package mockRepo

import (
	repository "basic-trade/internal/repository/sqlc"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockAdminRepository is a mock of AdminRepository interface.
type MockAdminRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAdminRepositoryMockRecorder
}

// MockAdminRepositoryMockRecorder is the mock recorder for MockAdminRepository.
type MockAdminRepositoryMockRecorder struct {
	mock *MockAdminRepository
}

// NewMockAdminRepository creates a new mock instance.
func NewMockAdminRepository(ctrl *gomock.Controller) *MockAdminRepository {
	mock := &MockAdminRepository{ctrl: ctrl}
	mock.recorder = &MockAdminRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdminRepository) EXPECT() *MockAdminRepositoryMockRecorder {
	return m.recorder
}

// CheckProductFromAdmin mocks base method.
func (m *MockAdminRepository) CheckProductFromAdmin(arg0 context.Context, arg1, arg2 uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckProductFromAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckProductFromAdmin indicates an expected call of CheckProductFromAdmin.
func (mr *MockAdminRepositoryMockRecorder) CheckProductFromAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckProductFromAdmin", reflect.TypeOf((*MockAdminRepository)(nil).CheckProductFromAdmin), arg0, arg1, arg2)
}

// CheckVariantFromAdmin mocks base method.
func (m *MockAdminRepository) CheckVariantFromAdmin(arg0 context.Context, arg1, arg2 uuid.UUID) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckVariantFromAdmin", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckVariantFromAdmin indicates an expected call of CheckVariantFromAdmin.
func (mr *MockAdminRepositoryMockRecorder) CheckVariantFromAdmin(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckVariantFromAdmin", reflect.TypeOf((*MockAdminRepository)(nil).CheckVariantFromAdmin), arg0, arg1, arg2)
}

// CreateAdmin mocks base method.
func (m *MockAdminRepository) CreateAdmin(arg0 context.Context, arg1 repository.CreateAdminParams) (repository.CreateAdminRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", arg0, arg1)
	ret0, _ := ret[0].(repository.CreateAdminRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockAdminRepositoryMockRecorder) CreateAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockAdminRepository)(nil).CreateAdmin), arg0, arg1)
}

// GetAdmin mocks base method.
func (m *MockAdminRepository) GetAdmin(arg0 context.Context, arg1 string) (repository.GetAdminRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin", arg0, arg1)
	ret0, _ := ret[0].(repository.GetAdminRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAdmin indicates an expected call of GetAdmin.
func (mr *MockAdminRepositoryMockRecorder) GetAdmin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockAdminRepository)(nil).GetAdmin), arg0, arg1)
}
